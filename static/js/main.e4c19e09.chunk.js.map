{"version":3,"sources":["MovieCard/MovieCard.jsx","MovieList/movieList.jsx","redux/actionTypes.js","redux/actions.js","MovieList/container.js","MovieDetail/MovieDetail.jsx","MovieDetail/container.js","App.jsx","serviceWorker.js","redux/reducers/movieList.js","redux/reducers/index.js","redux/api/movie.js","redux/sagas/movieListSaga.js","redux/store.js","index.js"],"names":["MovieCard","movie","Title","Year","Type","Poster","className","src","alt","title","MovieList","props","state","searchValue","changeSearchValue","bind","onSearchMovie","navigateToDetail","this","setState","target","value","searchMovie","imdbId","console","log","moviesData","isListNotEmpty","allMovies","length","placeholder","onChange","onClick","disabled","loading","error","to","map","imdbID","key","Component","FETCH_MOVIES_REQUEST","SEARCH_MOVIES_REQUEST","FETCH_MOVIES_DETAIL_REQUEST","fetchMovieSuccess","data","type","payload","searchMoviesSuccess","fetchMovieDetailSuccess","mapDispatchToProps","fetchMovie","fetchMovieError","connect","movieList","MovieDetail","params","match","fetchMovieDetail","id","selectedMovie","Rated","Released","Runtime","Genre","Director","Writer","Actors","Plot","Language","Country","Ratings","Source","Value","Metascore","imdbRating","imdbVotes","DVD","BoxOffice","Production","Website","Response","fetchMovieDetailError","movieDetail","App","exact","path","component","Boolean","window","location","hostname","initialState","combineReducers","action","Search","fetchMovies","searchMovies","fetchSelectedMovieApi","axios","get","then","catch","err","searchText","fetchMovieList","fetchSelectedMovie","watchfetchMovieList","watchSearchMovieList","watchFetchSelectedMovie","rootSaga","res","put","takeEvery","all","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4c19e09.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MovieCard.css';\r\n\r\nconst MovieCard = ({ movie }) => {\r\n    const { Title, Year, Type, Poster } = movie;\r\n    return (\r\n        <div className=\"category\">\r\n            <div className=\"imageDetails\">\r\n                <img src={Poster} alt={Title} className=\"movieImage\" />\r\n            </div>\r\n            <div className=\"movieDetails\">\r\n                <div className=\"movieName\" title={Title}>{Title}</div>\r\n                <div className=\"movieYear\" title={Year}>Released in {Year}</div>\r\n                <div>Category: {Type}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieCard;","import React, { Component } from 'react';\r\nimport './movieList.css';\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport { Link, BrowserRouter as Router, } from 'react-router-dom';\r\n\r\nexport default class MovieList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchValue: '',\r\n        };\r\n        this.changeSearchValue = this.changeSearchValue.bind(this);\r\n        this.onSearchMovie = this.onSearchMovie.bind(this);\r\n        this.navigateToDetail = this.navigateToDetail.bind(this);\r\n    }\r\n\r\n    changeSearchValue(searchValue) {\r\n        this.setState({searchValue: searchValue.target.value});\r\n    }\r\n\r\n    onSearchMovie() {\r\n        if (this.state.searchValue)\r\n            this.props.searchMovie(this.state.searchValue);\r\n    }\r\n\r\n    navigateToDetail(imdbId) {\r\n        console.log(imdbId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.searchMovie('test');\r\n    }\r\n\r\n    render() {\r\n        const { moviesData } = this.props;\r\n        const isListNotEmpty = moviesData.allMovies && moviesData.allMovies.length;\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"searchBox\">\r\n                <input placeholder=\"Enter Movie Name\" onChange={this.changeSearchValue} className=\"inputBox\" />\r\n                <button onClick={this.onSearchMovie} disabled={!this.state.searchValue} className=\"searchButton\">Search</button>\r\n                { moviesData.loading && !moviesData.error ?\r\n                    <div>loading</div> : null\r\n                }\r\n            </div>\r\n            <Router>\r\n                <Link to=\"/movie-detail/abc\">navigate</Link>\r\n            </Router>\r\n            {isListNotEmpty ?\r\n                    <div className=\"listContainer\">\r\n                        <Router>\r\n                            {moviesData.allMovies.map(movie => (\r\n                                <Link to={`/movie-detail/${movie.imdbID}`} key={movie.imdbID}>\r\n                                    <MovieCard movie={movie} />\r\n                                </Link>\r\n                            ))}\r\n                        </Router>\r\n            </div> : null}\r\n        </div>\r\n    );\r\n    }\r\n}\r\n","export const FETCH_MOVIES_REQUEST = \"FETCH_MOVIES_REQUEST\";\r\nexport const FETCH_MOVIES_LOADING = \"FETCH_MOVIES_LOADING\";\r\nexport const FETCH_MOVIES_SUCCESS = \"FETCH_MOVIES_SUCCESS\";\r\nexport const FETCH_MOVIES_FAILED = \"FETCH_MOVIES_FAILED\";\r\nexport const SEARCH_MOVIES_REQUEST = \"SEARCH_MOVIES_REQUEST\";\r\nexport const SEARCH_MOVIES_SUCCESS = \"SEARCH_MOVIES_SUCCESS\";\r\nexport const FETCH_MOVIES_DETAIL_REQUEST = \"FETCH_MOVIES_DETAIL_REQUEST\";\r\nexport const FETCH_MOVIES_DETAIL_SUCCESS = \"FETCH_MOVIES_DETAIL_SUCCESS\";\r\nexport const FETCH_MOVIES_DETAIL_FAILED = \"FETCH_MOVIES_DETAIL_FAILED\";\r\n\r\n","import {\r\n    FETCH_MOVIES_REQUEST,\r\n    FETCH_MOVIES_LOADING,\r\n    FETCH_MOVIES_SUCCESS,\r\n    FETCH_MOVIES_FAILED,\r\n    SEARCH_MOVIES_REQUEST,\r\n    SEARCH_MOVIES_SUCCESS,\r\n    FETCH_MOVIES_DETAIL_REQUEST,\r\n    FETCH_MOVIES_DETAIL_SUCCESS,\r\n    FETCH_MOVIES_DETAIL_FAILED,\r\n} from \"./actionTypes\";\r\n\r\n\r\nexport const fetchMovie = () => ({\r\n  type: FETCH_MOVIES_REQUEST,\r\n});\r\n\r\nexport const fetchMovieLoading = () => ({\r\n  type: FETCH_MOVIES_LOADING,\r\n});\r\n\r\nexport const fetchMovieSuccess = (data) => ({\r\n    type: FETCH_MOVIES_SUCCESS,\r\n    payload: data,\r\n});\r\n\r\nexport const fetchMovieError = (error) => ({\r\n    type: FETCH_MOVIES_FAILED,\r\n    payload: error,\r\n});\r\n\r\nexport const searchMovie = (searchValue) => ({\r\n    type: SEARCH_MOVIES_REQUEST,\r\n    payload: searchValue,\r\n});\r\n\r\nexport const searchMoviesSuccess = (data) => ({\r\n    type: SEARCH_MOVIES_SUCCESS,\r\n    payload: data,\r\n});\r\n\r\nexport const fetchMovieDetail = (id) => ({\r\n    type: FETCH_MOVIES_DETAIL_REQUEST,\r\n    payload: id,\r\n});\r\n\r\nexport const fetchMovieDetailSuccess = (data) => ({\r\n    type: FETCH_MOVIES_DETAIL_SUCCESS,\r\n    payload: data,\r\n});\r\n\r\nexport const fetchMovieDetailError = (error) => ({\r\n    type: FETCH_MOVIES_DETAIL_FAILED,\r\n    payload: error,\r\n});\r\n","import { connect } from 'react-redux';\r\nimport movieList from './movieList';\r\nimport {\r\n    fetchMovie,\r\n    fetchMovieSuccess,\r\n    fetchMovieError,\r\n    searchMovie,\r\n} from '../redux/actions'\r\n\r\nconst mapStateToProps = state => {\r\n    const moviesData = state.movieList;\r\n    return { moviesData };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovie,\r\n    fetchMovieSuccess,\r\n    fetchMovieError,\r\n    searchMovie,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(movieList);","import React, { Component } from 'react';\r\n\r\nexport default class MovieDetail extends Component {\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        this.props.fetchMovieDetail(`${params.id}`);\r\n    }\r\n    render() {\r\n        const { selectedMovie } = this.props;\r\n        return (\r\n            <div>\r\n                {selectedMovie && selectedMovie.data ? \r\n                    <div>\r\n                        <img src={selectedMovie.data.Poster} alt={selectedMovie.data.Title} />\r\n                        <div>{selectedMovie.data.Title}</div>\r\n                        <div>Year: {selectedMovie.data.Year}</div>\r\n                        <div>Rated: {selectedMovie.data.Rated}</div>\r\n                        <div>Released: {selectedMovie.data.Released}</div>\r\n                        <div>Runtime: {selectedMovie.data.Runtime}</div>\r\n                        <div>Genre: {selectedMovie.data.Genre}</div>\r\n                        <div>Director: {selectedMovie.data.Director}</div>\r\n                        <div>Writer: {selectedMovie.data.Writer}</div>\r\n                        <div>Actors: {selectedMovie.data.Actors}</div>\r\n                        <div>Plot: {selectedMovie.data.Plot}</div>\r\n                        <div>Language: {selectedMovie.data.Language}</div>\r\n                        <div>Country: {selectedMovie.data.Country}</div>\r\n                        <ul>Ratings: {selectedMovie.data.Ratings && selectedMovie.data.Ratings.map(data => {\r\n                            return (\r\n                                <li key={data.Source}>\r\n                                    {data.Source} : {data.Value}\r\n                                </li>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                        <div>Metascore: {selectedMovie.data.Metascore}</div>\r\n                        <div>imdbRating: {selectedMovie.data.imdbRating}</div>\r\n                        <div>imdbVotes: {selectedMovie.data.imdbVotes}</div>\r\n                        <div>imdbID: {selectedMovie.data.imdbID}</div>\r\n                        <div>Type: {selectedMovie.data.Type}</div>\r\n                        <div>DVD: {selectedMovie.data.DVD}</div>\r\n                        <div>BoxOffice: {selectedMovie.data.BoxOffice}</div>\r\n                        <div>Production: {selectedMovie.data.Production}</div>\r\n                        <div>Website: {selectedMovie.data.Website}</div>\r\n                        <div>Response: {selectedMovie.data.Response}</div>\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n                {selectedMovie.error ? <div>Something Went Wrong</div> : null}\r\n                {selectedMovie.loading ? <div>Loading</div> : null}\r\n            </div>\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport movieDetail from './MovieDetail';\r\nimport {\r\n    fetchMovieDetail,\r\n    fetchMovieDetailSuccess,\r\n    fetchMovieDetailError,\r\n} from '../redux/actions'\r\n\r\nconst mapStateToProps = state => {\r\n    const selectedMovie = state.movieList.selectedMovie;\r\n    return { selectedMovie };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovieDetail,\r\n    fetchMovieDetailSuccess,\r\n    fetchMovieDetailError,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(movieDetail);","import React from 'react';\nimport './App.css';\nimport MovieList from './MovieList/container';\nimport MovieDetail from './MovieDetail/container';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/movie-list\">\n            <MovieList />\n          </Route>\n          <Route path=\"/movie-detail/:id\" component={MovieDetail} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    FETCH_MOVIES_SUCCESS,\r\n    FETCH_MOVIES_LOADING,\r\n    FETCH_MOVIES_REQUEST,\r\n    FETCH_MOVIES_FAILED,\r\n    SEARCH_MOVIES_SUCCESS,\r\n    FETCH_MOVIES_DETAIL_REQUEST,\r\n    FETCH_MOVIES_DETAIL_SUCCESS,\r\n    FETCH_MOVIES_DETAIL_FAILED,\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  allMovies: null,\r\n  error: null,\r\n  loading: null,\r\n  selectedMovie: {\r\n      data: null,\r\n      error: null,\r\n      loading: null,\r\n  },\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_MOVIES_REQUEST: {\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    }\r\n    case FETCH_MOVIES_LOADING: {\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    }\r\n    case FETCH_MOVIES_SUCCESS: {\r\n      return {\r\n        ...initialState,\r\n        allMovies: action.payload,\r\n      };\r\n    }\r\n    case FETCH_MOVIES_FAILED: {\r\n      return {\r\n        ...initialState,\r\n        error: action.error,\r\n      };\r\n    }\r\n    case SEARCH_MOVIES_SUCCESS: {\r\n        return {\r\n            ...initialState,\r\n            allMovies: action.payload.Search\r\n        }\r\n    }\r\n    case FETCH_MOVIES_DETAIL_REQUEST: {\r\n        return {\r\n            ...initialState,\r\n            selectedMovie: {\r\n                ...initialState.selectedMovie,\r\n                loading: true,\r\n            }\r\n        }\r\n    }\r\n    case FETCH_MOVIES_DETAIL_SUCCESS: {\r\n        return {\r\n            ...initialState,\r\n            selectedMovie: {\r\n                ...initialState.selectedMovie,\r\n                data: action.payload,\r\n            }\r\n        }\r\n    }\r\n    case FETCH_MOVIES_DETAIL_FAILED: {\r\n      return {\r\n        ...initialState,\r\n        error: action.error,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport movieList from \"./movieList\";\r\n\r\nexport default combineReducers({ movieList });\r\n","import axios from 'axios';\r\n\r\nexport function* fetchMovies() {\r\n    return yield axios.get('http://www.omdbapi.com/?t=galaxy&apikey=9075f344')\r\n        .then(data =>{\r\n            return data.data;\r\n        })\r\n        .catch(err => err);\r\n}\r\n\r\nexport function* searchMovies(searchText) {\r\n    return yield axios.get(`http://www.omdbapi.com/?apikey=9075f344&s=${searchText}`)\r\n        .then(data =>{\r\n            return data.data;\r\n        })\r\n        .catch(err => err);\r\n}\r\n\r\nexport function* fetchSelectedMovieApi(id) {\r\n    return yield axios.get(`http://www.omdbapi.com/?apikey=9075f344&i=${id}`)\r\n        .then(data =>{\r\n            return data.data;\r\n        })\r\n        .catch(err => err);\r\n}\r\n","import { put, takeEvery, all } from 'redux-saga/effects';\r\nimport { fetchMovieSuccess, searchMoviesSuccess, fetchMovieDetailSuccess } from '../actions';\r\nimport {\r\n    FETCH_MOVIES_REQUEST,\r\n    SEARCH_MOVIES_REQUEST,\r\n    FETCH_MOVIES_DETAIL_REQUEST,\r\n} from '../actionTypes';\r\nimport { fetchMovies, searchMovies, fetchSelectedMovieApi } from '../api/movie';\r\n\r\nexport function* fetchMovieList() {\r\n    const res = yield fetchMovies();\r\n    yield put(fetchMovieSuccess(res.Title));\r\n}\r\n\r\nexport function* fetchSelectedMovie(action) {\r\n    const res = yield fetchSelectedMovieApi(action.payload);\r\n    yield put(fetchMovieDetailSuccess(res));\r\n}\r\n\r\nexport function* searchMovie(action) {\r\n    const res = yield searchMovies(action.payload);\r\n    yield put(searchMoviesSuccess(res));\r\n}\r\n\r\nexport function* watchfetchMovieList() {\r\n    yield takeEvery(FETCH_MOVIES_REQUEST, fetchMovieList);\r\n}\r\n\r\nexport function* watchSearchMovieList() {\r\n    yield takeEvery(SEARCH_MOVIES_REQUEST, searchMovie);\r\n}\r\n\r\nexport function* watchFetchSelectedMovie() {\r\n    yield takeEvery(FETCH_MOVIES_DETAIL_REQUEST, fetchSelectedMovie);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchfetchMovieList(),\r\n        watchSearchMovieList(),\r\n        watchFetchSelectedMovie(),\r\n    ])\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './sagas/movieListSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}